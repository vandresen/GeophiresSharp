@inherits LayoutComponentBase
@inject ISimulationRepository sim
@inject ISubsurfaceTechnicalRepository subsurfaceRep
@inject ISurfaceTechnicalRepository surfaceRep
@inject IFinancialRepository financials
@inject ICapitalAndOMCostRepository capital
@inject IModeling gm

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="5" class="d-flex align-center">
        <MudText Typo="Typo.h5">Geophires</MudText>
        <MudSpacer />
    </MudAppBar>
    <MudMainContent>
        <MudContainer Class="mt-5">
            <div>
                <FileSelection FileSelected="UploadFile" Label="Upload File"/>
                @if (producedTemperature)
                {
                    <FileSelection FileSelected="UploadTempData" Label="Upload Produced Temprature Data" />
                }
            </div>
            <br />
            <div>
                <MudTextField @bind-Value="FileSelection" Label="Selected Parameter File" ReadOnly="true" Variant="Variant.Outlined" />
            </div>
            <br />
            <div>
                <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
                    Model Calculations
                </MudButton>
            </div>
            <MudGrid Class="mt-8" >
                <MudItem xs="4">
                    @if (simParms != null)
                    {
                        <Simulation Parms="simParms" />
                    }
                </MudItem>
                <MudItem xs="8">
                        @if (simParms != null)
                        {
                            <MudTabs Elevation="4" Rounded="true" Centered="true" Color="@Color.Primary">
                                <MudTabPanel Text="Subsurface Technical Parameters">
                                <SubsurfaceTechnical Parms="subsurfaceParms" />
                                </MudTabPanel>
                                <MudTabPanel Text="Surface Technical Parameters">
                                    <SurfaceTechnical Parms="surfaceParms"/>
                                </MudTabPanel>
                                <MudTabPanel Text="Financial Parameters">
                                    <Financial Parms="financialParms"/>
                                </MudTabPanel>
                                <MudTabPanel Text="Capital and O&M Cost Parameters">
                                    <CapitalCost Parms="capitalParms"/>
                                </MudTabPanel>
                            </MudTabs>
                        }                
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    [Inject] private IDialogService DialogService { get; set; }
    bool producedTemperature;
    public string FileSelection { get; set; } = "No file selected";
    string content = "No content";
    public string TempDataFileSelection { get; set; } = "No file selected";
    string tempDataContent = "No content";
    bool closeResult = false;
    private SimulationParameters simParms { get; set; }
    private SubsurfaceTechnicalParameters subsurfaceParms { get; set; }
    private SurfaceTechnicalParameters surfaceParms { get; set; }
    private FinancialParameters financialParms { get; set; }
    private CapitalAndOMCostParameters capitalParms { get; set; }

    private async Task UploadFile(IBrowserFile file)
    {
        FileSelection = file.Name;
        Console.WriteLine(FileSelection);
        using (var reader = new StreamReader(file.OpenReadStream()))
        {
            Console.WriteLine("Before reading content");
            content = await reader.ReadToEndAsync();
            Console.WriteLine("After");
        }
        string[] lines = content.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
        Console.WriteLine($"Number of lines in file is {lines.Length}");
        simParms = sim.GetSimulationParameters(lines);
        Console.WriteLine(simParms.timestepsperyear);
        subsurfaceParms = subsurfaceRep.GetSubsurfaceTechnicalParameters(lines, simParms);
        producedTemperature = false;
        if (subsurfaceParms.resoption == 5)
        {
            producedTemperature = true;
        }
        Console.WriteLine(subsurfaceParms.resoption);
        surfaceParms = surfaceRep.GetSurfaceTechnicalParameters(lines, subsurfaceParms);
        financialParms = financials.GetFinancialParameters(lines, simParms);
        capitalParms = capital.GetCapitalAndOMCostParameters(lines, simParms);
        StateHasChanged();
    }

    private async Task UploadTempData(IBrowserFile file)
    {
        TempDataFileSelection = file.Name;
        Console.WriteLine(TempDataFileSelection);
        using (var reader = new StreamReader(file.OpenReadStream()))
        {
            tempDataContent = await reader.ReadToEndAsync();
        }
    }

    private async Task OpenDialog()
    {
        if (FileSelection == "No file selected")
        {
            await DialogService.ShowMessageBox(
                "File Selection Error",
                "Please select a parameter file.",
                yesText: "OK"
            );
            return;
        }
        if (subsurfaceParms.resoption == 5 && TempDataFileSelection == "No file selected")
        {
            await DialogService.ShowMessageBox(
                "Temprature Data Error",
                "Please select a temprature data file.",
                yesText: "OK"
            );
            return;
        }
        InputParameters input = new InputParameters();
        input.Content = content;
        input.TempDataContent = tempDataContent;
        input.surfaceParms = surfaceParms;
        input.subsurfaceParms = subsurfaceParms;
        input.financialParms = financialParms;
        input.capitalParms = capitalParms;
        input.simParms = simParms;
        string outputContent = await gm.Modeling(input);
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["content"] = outputContent };
        var output = await DialogService.Show<ModelResults>("Model Results", parameters, options).Result;

        if (!output.Canceled)
        {
            closeResult = (bool)(output.Data ?? false);
        }
        content = "No content";
        FileSelection = "No file selected";
    }
}
