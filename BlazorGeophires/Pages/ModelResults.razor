@inject IJSRuntime JS
@inject IDialogService DialogService

<style>
    .report-container {
        max-height: 500px; /* Set the maximum height to your desired value */
        overflow-y: auto;
    }
</style>

<MudDialog>
    <DialogContent>
        <div class="report-container">
            <pre>@content</pre>
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="@Print">Print</MudButton>
        <MudButton Color="Color.Tertiary" OnClick="@OpenGraphDialog">Graph</MudButton>
        <MudButton Color="Color.Secondary" OnClick="@Ok">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IDialogReference DialogReference { get; set; }
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }

    [Parameter] public string content { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Console.WriteLine(content);
        ReportText = content;
    }

    private string ReportText;

    private async Task Print()
    {
        await JS.InvokeVoidAsync("printContent", content);
    }

    private void Ok()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    private async Task OpenGraphDialog()
    {
        // var parameters = new DialogParameters();
        var parameters = new DialogParameters { ["content"] = content };
        var options = new DialogOptions
            {
                FullWidth = true,
                MaxWidth = MaxWidth.Medium,
                CloseButton = true,
                NoHeader = false,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
            };


        DialogService.Show<GraphDialog>("Graph Output", parameters, options);
    }
}