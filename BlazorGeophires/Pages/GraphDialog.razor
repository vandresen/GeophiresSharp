@inject IModeling calResult
@using System.Text.Json;

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">Line Chart</MudText>
        <MudPaper Class="doc-section-component-container">
            <MudChart ChartType="ChartType.Line" ChartOptions="ChartOptions" ChartSeries="@_series" XAxisLabels="@_labels" Width="@_width" Height="@_height" />
        </MudPaper>
    </DialogContent>

    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private IMudDialogInstance MudDialog { get; set; }
    [Parameter] public string content { get; set; }

    private string _width = "650px";
    private string _height = "350px";

    private string[] _labels = Array.Empty<string>();
    private List<ChartSeries> _series = new();

    public ChartOptions ChartOptions = new ChartOptions
        {
            LineStrokeWidth = 2
        };

    protected override void OnInitialized()
    {
        LoadChartData();
    }

    private void LoadChartData()
    {
        string json = calResult.GetCalculatedJsonResult();
        var result = JsonSerializer.Deserialize<CalculatedResults>(json);

        if (result?.NetElectricityProduced != null)
        {
            int totalPoints = result.NetkWhProduced.Length;
            int numLabels = 10;

            // Compute interval to pick 10 evenly spaced labels
            double step = (double)(totalPoints - 1) / (numLabels - 1);
            HashSet<int> labelPositions = Enumerable.Range(0, numLabels)
                .Select(i => (int)Math.Round(i * step))
                .ToHashSet();

            _labels = Enumerable.Range(1, totalPoints)
                .Select((val, idx) => labelPositions.Contains(idx) ? $"Year {val}" : "")
                .ToArray();

            // Create the chart series
            _series = new List<ChartSeries>
            {
                new ChartSeries
                {
                    Name = "Net Electricity Produced (GWh)",
                    Data = result.NetkWhProduced.Select(x => x / 1e6).ToArray()
                }
            };
        }
    }

    void Close() => MudDialog.Close(DialogResult.Ok(true));
}
