@page "/"

@inject HttpClient Http
@inject IDialogService DialogService
@inject IDisplayMessage displayMessage
@inject NavigationManager NavigationManager

<div>
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       for="@context">
                Upload File
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
</div>

<br />

<div>
    <MudTextField @bind-Value="FileSelection" Label="Selected File" ReadOnly="true" Variant="Variant.Outlined" />
</div>

<br />

<div>
    <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
        Model Calculations
    </MudButton>
</div>


@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    public string FileSelection { get; set; } = "No file selected";
    bool closeResult = false;
    string content = "No content";

    private async Task UploadFiles(IBrowserFile file)
    {
        FileSelection = file.Name;
        Console.WriteLine(FileSelection);
        using (var reader = new StreamReader(file.OpenReadStream()))
        {
            Console.WriteLine("Before reading content");
            content = await reader.ReadToEndAsync();
            Console.WriteLine("After");
        }

    }

    private async Task OpenDialog()
    {
        if (FileSelection == "No file selected")
        {
            await displayMessage.DisplayErrorMessage("Please select a data connector");
            return;
        }
        InputParameters input = new InputParameters();
        Response result = new Response();
        input.Content = content;
        var response = await Http.PostAsJsonAsync("Modeling", input);
        if (response.IsSuccessStatusCode)
        {
            result = await response.Content.ReadFromJsonAsync<Response>();
            Console.WriteLine(result.Result);
        }

        string outputContent = result.Result.ToString();
        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters { ["content"] = outputContent };
        var output = await DialogService.Show<ModelResults>("Model Results", parameters, options).Result;

        if (!output.Canceled)
        {
            closeResult = (bool)(output.Data ?? false);
        }
        content = "No content";
        FileSelection = "No file selected";
        NavigationManager.NavigateTo($"/");
    }
}