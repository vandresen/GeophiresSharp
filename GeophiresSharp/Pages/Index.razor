@page "/"

@inject IDialogService DialogService

<div>
    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
        <ButtonTemplate>
            <MudButton HtmlTag="label"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload"
                       for="@context">
                Upload File
            </MudButton>
        </ButtonTemplate>
    </MudFileUpload>
</div>

<br />

<div>
    <MudTextField @bind-Value="FileSelection" Label="Selected File" ReadOnly="true" Variant="Variant.Outlined" />
</div>

<br />

<div>
    <MudButton OnClick="OpenDialog" Variant="Variant.Filled" Color="Color.Primary">
        Model Calculations
    </MudButton>
</div>


@code
{
    IList<IBrowserFile> files = new List<IBrowserFile>();
    public string FileSelection { get; set; } = "No file selected";
    bool closeResult = false;
    string content = "No content";

    private async Task UploadFiles(IBrowserFile file)
    {
        FileSelection = file.Name;
        using (var reader = new StreamReader(file.OpenReadStream()))
        {
            content =  await reader.ReadToEndAsync();
        }

    }

    async Task OpenDialog()
    {
        string[] lines = content.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
        ModelCalculation mc = new ModelCalculation();
        await mc.ReadFromRepository(lines);
        Console.WriteLine("Finished reading the repository");
        mc.CalculateModel();
        content = mc.CreateReport();
        var parameters = new DialogParameters { ["content"] = content };
        var result = await DialogService.Show<ModelResults>("Model Results", parameters).Result;

        if (!result.Canceled)
        {
            closeResult = (bool)(result.Data ?? false);
        }
    }
}
